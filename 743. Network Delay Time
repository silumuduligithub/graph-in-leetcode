class Solution {
    class Pair implements Comparable<Pair>{
        int node;
        int val;
        Pair(int node, int val){
            this.node = node;
            this.val = val;
        }
        public int compareTo(Pair o){
            return this.val - o.val;
        }
    }
    public List<List<Pair>> builtGraph(int n, int[][] edges){
        List<List<Pair>> graph = new ArrayList<>();
        for(int i = 0; i <= n; i++){
            graph.add(new ArrayList<>());
        }
        for(int[] edge : edges){
            int u = edge[0];
            int v = edge[1];
            int w = edge[2];
            graph.get(u).add(new Pair(v, w));
        }
        return graph;
    }
    public int networkDelayTime(int[][] times, int n, int K) {
        List<List<Pair>> graph = builtGraph(n, times);
        PriorityQueue<Pair> que = new PriorityQueue<>();
        Set<Integer>set = new HashSet<>();
        que.add(new Pair(K, 0));
        int ans = 0;
        while(que.size() > 0){
            Pair rpair = que.remove();
            if(set.contains(rpair.node))continue;
            set.add(rpair.node);
            int val = rpair.val;
            ans = Math.max(ans, val);
            if(set.size() == n)return ans;
            for(Pair nbr : graph.get(rpair.node)){
                if(!set.contains(nbr.node)){
                    que.add(new Pair(nbr.node, val + nbr.val));
                }
            }
        }
        return -1;
    }
}
