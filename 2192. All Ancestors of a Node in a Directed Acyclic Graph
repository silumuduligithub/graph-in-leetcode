class Solution {
    public List<List<Integer>> makeGraph(int n, int[][] edges){
        List<List<Integer>> graph = new ArrayList<>();
        for(int i = 0; i < n; i++)graph.add(new ArrayList<>());
        for(int[] edge : edges){
            int u = edge[0];
            int v = edge[1];
            graph.get(u).add(v);
        }
        return graph;
    }
    public void dfs(int cur, List<List<Integer>> graph, boolean[] vis){
        vis[cur] = true;
        for(int nbr : graph.get(cur)){
            if(vis[nbr])continue;
            dfs(nbr, graph,  vis);
        }
    }
    public List<List<Integer>> getAncestors(int n, int[][] edges) {
        List<List<Integer>> graph = makeGraph(n, edges);
        List<List<Integer>> ans = new ArrayList<>();
        for(int i = 0; i < n; i++)ans.add(new ArrayList<>());
        for(int i = 0; i < n; i++){
            boolean[] vis = new boolean[n];
            dfs(i, graph, vis);
            for(int j = 0; j < n; j++){
                if(i == j)continue;
                if(vis[j] == true)ans.get(j).add(i);
            }
        }
        return ans;
    }
}
