class Solution {
    public HashMap<Integer, List<Integer>> constructGraph(int[][] bombs){
        HashMap<Integer, List<Integer>> graph = new HashMap<>();
        int n = bombs.length;
        long mod = (long)1e9 + 7;
        for(int i = 0; i < n; i++){
            int x1 = bombs[i][0];
            int y1 = bombs[i][1];
            long r1 = bombs[i][2];
            for(int j = 0; j < n; j++){
                if(i != j){
                    int x2 = bombs[j][0];
                    int y2 = bombs[j][1];
                    int x = Math.abs(x1 - x2);
                    int y = Math.abs(y1 - y2);
                    long dist =((x % mod) * (x % mod)) + ((y % mod) * (y % mod));
                    if(((r1 % mod) * (r1 % mod)) >= dist){
                        List<Integer> nbrs = graph.getOrDefault(i, new ArrayList<>());

                        nbrs.add(j);
                        graph.put(i, nbrs);
                    }
                }
            }
        }
        return graph;
    }
    public void dfs(int cur, HashMap<Integer, List<Integer>> graph, Set<Integer> set){
        set.add(cur);
        List<Integer> nbrs = graph.getOrDefault(cur, new ArrayList<>());
        for(int nbr : nbrs){
            if(!set.contains(nbr)){
                dfs(nbr, graph, set);
            }
        }
    }
    public int maximumDetonation(int[][] bombs) {
        HashMap<Integer, List<Integer>> graph = constructGraph(bombs);
        int ans = 0;
        for(int i = 0; i < bombs.length; i++){
            int count = 0;
            Set<Integer> vis = new HashSet<>();
            dfs(i, graph, vis);
            ans = Math.max(vis.size(), ans);
        }
        return ans;
    }
}
