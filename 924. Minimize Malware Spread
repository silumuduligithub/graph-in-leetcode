class Solution {
     int[] parent;
    int[] size;
    public int findParent(int u){
        if(parent[u] == u)return u;
        return parent[u] = findParent(parent[u]);
    }
    public void unionBySize(int u, int v){
        int alp_u = findParent(u);
        int alp_v = findParent(v);
        if(alp_u != alp_v){
            if(size[alp_u] < size[alp_v]){
                parent[alp_u] = alp_v;
                size[alp_v] += size[alp_u];
            }else{
                parent[alp_v] = alp_u;
                size[alp_u] += size[alp_v];
            }
        }
    }
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        parent = new int[n];
        size = new int[n];
        for(int i = 0; i < n; i++){
            parent[i] = i;
            size[i] = 1;
        }
        for(int i = 0; i < graph.length; i++){
            for(int j = 0; j < graph[0].length; j++){
                if(graph[i][j] == 1){
                    unionBySize(i, j);
                }
            }
        }
        int[] infected = new int[graph.length];
        for(int ini : initial){
            int p = findParent(ini);
            infected[p]++;
        }
        int ans = -1;
        int maxSize = -1;
        for(int e : initial){
            int p = findParent(e);
            if(infected[p] == 1 && size[p] >= maxSize){
                if(size[p] == maxSize){
                    ans = Math.min(ans, e);
                }else{
                    ans = e;
                }
                maxSize = size[p];
            }
        }
        if(ans == -1){
            int min = Integer.MAX_VALUE;
            for(int e : initial){
                min = Math.min(min, e);
            }
            return min;
        }
        return ans;
    }
}
