class Solution {
    int n;
    int ch = 2;
    Set<String> set;
    class Pair{
        int row;
        int col; 
        Pair(int row, int col){
            this.row = row;
            this.col = col;
        }
    }
    public int largestIsland(int[][] grid) {
        n = grid.length;
        int res = 0;
        HashMap<String, Integer> map = new HashMap<>();
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                if(grid[i][j] == 1){
                    set = new HashSet<>();
                    int curAns = bfs(grid, i, j);
                    res = Math.max(res, curAns);
                    for(String s : set){
                        map.put(s, curAns);
                    }
                }
            }
        }
        // now we need to travers every zero
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                if(grid[i][j] == 0){
                    int curAns = 0;
                    Set<Integer> temp = new HashSet<>();
                    if(isValid(grid, i - 1, j) && grid[i - 1][j] != 0){
                        int k = i - 1;
                        if(map.containsKey(k +" "+ j)){
                            temp.add(grid[i - 1][j]);
                            curAns += map.get(k + " " + j);
                        }
                    }
                    if(isValid(grid, i, j + 1) && grid[i][j + 1] != 0){
                        int k = j + 1;
                         if(map.containsKey(i +" "+ k) && !temp.contains(grid[i][k])){  
                             temp.add(grid[i][j + 1]);
                            curAns += map.get(i + " " + k);
                        }
                    }
                    if(isValid(grid, i + 1, j) && grid[i + 1][j] != 0){
                        int k = i + 1;
                        if(map.containsKey(k +" "+ j) && !temp.contains(grid[i + 1][j])){
                           temp.add(grid[i + 1][j]);
                            curAns += map.get(k + " " + j);
                        }
                    }
                    if(isValid(grid, i, j - 1) && grid[i][j - 1] != 0){
                        int k = j - 1;
                        if(map.containsKey(i +" "+ k) && !temp.contains(grid[i][j - 1])){
                            temp.add(grid[i][j -1]);
                            curAns += map.get(i + " " + k);
                        }
                    }
                    res = Math.max(res, curAns);
                }
            }
        }
        if((n * n) == res)return res;
        return res + 1;
    }
    public boolean isValid(int[][] grid, int row, int col){
        if(row < 0 || col < 0 || row >= n || col >= n)return false;
        return true;
    }
    public int bfs(int[][] grid, int row, int col){
       Queue<Pair> que = new LinkedList<>();
       que.add(new Pair(row, col));
       grid[row][col] = ch;
       int length = 1;
       while(que.size() > 0){
           int size = que.size();
           while(size-- > 0){
               Pair rpair = que.remove();
               set.add(rpair.row +" "+rpair.col);
               if(isValid(grid, rpair.row - 1, rpair.col)&& grid[rpair.row - 1][rpair.col] == 1){
                   length++;
                   grid[rpair.row - 1][rpair.col] = ch;
                   que.add(new Pair(rpair.row - 1, rpair.col));
               }
               if(isValid(grid, rpair.row, rpair.col + 1) && grid[rpair.row][rpair.col + 1] == 1){
                   length++;
                   grid[rpair.row][rpair.col + 1] = ch;
                   que.add(new Pair(rpair.row, rpair.col + 1));
               }
               if(isValid(grid, rpair.row + 1, rpair.col)  && grid[rpair.row + 1][rpair.col] == 1){
                   length++;
                   grid[rpair.row + 1][rpair.col] = ch;
                   que.add(new Pair(rpair.row + 1, rpair.col));
               }
               if(isValid(grid, rpair.row, rpair.col - 1) && grid[rpair.row][rpair.col - 1] == 1){
                   length++;
                   grid[rpair.row][rpair.col - 1] = ch;
                   que.add(new Pair(rpair.row, rpair.col - 1));
               }
           }
       }
       ch++;
       System.out.println(length);
        return length;
    }
}
