class Solution {
    public List<List<Integer>> constructGraph(int[] parent){
        List<List<Integer>> graph = new ArrayList<>();
        for(int i = 0; i < parent.length; i++)graph.add(new ArrayList<>());
        for(int i = 1; i < parent.length; i++){
            graph.get(i).add(parent[i]);
            graph.get(parent[i]).add(i);
        }
        return graph;
    }
    int ans = 1;
    public void dfs(int src, int parent, List<List<Integer>> graph, String s, int[] dist){
       dist[src] = 1;
        for(int nbr : graph.get(src)){
            if(nbr != parent){
                dfs(nbr, src, graph, s, dist);
                if(s.charAt(src) != s.charAt(nbr)){
                    ans = Math.max(ans, dist[src] + dist[nbr]);
                    dist[src] = Math.max(dist[src], dist[nbr] + 1);
                }
            }
        }
    }
    public int longestPath(int[] parent, String s) {
        List<List<Integer>> graph = constructGraph(parent);
        dfs(0, -1, graph, s, new int[parent.length]);
        return ans;
    }
}
