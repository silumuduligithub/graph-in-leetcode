class Solution {
    public List<List<Integer>> builtGraph(int n, int[][] edges){
        List<List<Integer>> graph = new ArrayList<>();
        for(int i = 0; i < n; i++){
            graph.add(new ArrayList<>());
        }
        for(int[] edge : edges){
            graph.get(edge[0]).add(edge[1]);
            graph.get(edge[1]).add(edge[0]);
        }
        return graph;
    }
    public int findShortestCycle(int n, int[][] edges) {
        List<List<Integer>> graph = builtGraph(n, edges);
        int ans = Integer.MAX_VALUE;
        for(int i = 0; i < n; i++){
            Queue<Integer> que = new LinkedList<>();
            int[] dist = new int[n];
            int[] parent = new int[n];
            Arrays.fill(dist, (int) (1e9));
            Arrays.fill(parent, -1);
            que.add(i);
            dist[i] = 0;
            while(que.size() > 0){
                int front = que.remove();
                for(int nbr : graph.get(front)){
                    if(dist[nbr] == (int) (1e9)){
                        dist[nbr] = dist[front] + 1;
                        parent[nbr] = front;
                        que.add(nbr);
                    }else if(parent[front] != nbr && parent[nbr] != front){
                        ans = Math.min(ans, dist[front] + dist[nbr] + 1);
                    }
                }
            }
        }
        return ans == Integer.MAX_VALUE ? -1 : ans;
    }
}
