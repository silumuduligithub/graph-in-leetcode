class Solution {
    int ans;
    public int longestCycle(int[] edges) {
        boolean[] vis = new boolean[edges.length];
        boolean[] path = new boolean[edges.length];
        int[] distArr = new int[edges.length];
        ans = -1;
        for(int i = 0; i < edges.length; i++){
            if(vis[i])continue;
            dfs(i, edges, distArr, vis, path, 0);
        }
        return ans;
    }
    public void dfs(int cur, int[] edges, int[] distArr, boolean[] vis, boolean[] path, int dist){
        if(cur != -1){
            if(!vis[cur]){
                distArr[cur] = dist;
                vis[cur] = true;
                path[cur] = true;
                dfs(edges[cur], edges, distArr, vis, path, dist + 1);
            }else if(path[cur]){
                ans = Math.max(ans, dist - distArr[cur]);
            }
             path[cur] = false;
        }
    }
}
