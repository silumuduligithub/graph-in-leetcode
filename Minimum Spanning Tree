//kruskals algorithm

class Dsu{
     int[] rank;
     int[]parent;
     Dsu(int n){
        rank = new int[n];
        parent = new int[n];
        for(int i = 0; i < n; i++)parent[i] = i;
    }
    public  int findParent(int u){
        if(u == parent[u])return u;
        return parent[u] = findParent(parent[u]);
    }
    public  boolean unionByRank(int u, int v){
        int alp_u = findParent(u);
        int alp_v = findParent(v);
        if(alp_u == alp_v)return false;
        else{
            if(rank[alp_u] < rank[alp_v]){
                parent[alp_u] = alp_v;
            }else if(rank[alp_v] < rank[alp_u]){
                parent[alp_v] = alp_u;
            }else{
                parent[alp_u] = alp_v;
                rank[alp_v]++;
            }
            return true;
        }
    }
}
class Solution{
    static class Helper implements Comparable<Helper>{
        int u;
        int v;
        int w;
        Helper(int u, int v, int w){
            this.u = u;
            this.v = v;
            this.w = w;
        }
        public int compareTo(Helper h){
            return this.w - h.w;
        }
    }
	static int spanningTree(int V, int E, int edges[][]){
	    Dsu dsu = new Dsu(V);
	    Helper[] arr = new Helper[E];
	    for(int i = 0; i < E; i++){
	        arr[i] = new Helper(edges[i][0], edges[i][1], edges[i][2]);
	    }
	    Arrays.sort(arr);
	    int cost = 0;
	    for(int i = 0; i < arr.length; i++){
	        if(dsu.unionByRank(arr[i].u, arr[i].v)){
	            cost += arr[i].w;
	        }
	    }
	    return cost;
	}
}
